Func _SoundOpen($sFilePath)
	;check for file
	If Not FileExists($sFilePath) Then Return SetError(2, 0, 0)
	;create random string for file ID
	Local $aSndID[4]
	For $i = 1 To 10
		$aSndID[0] &= Chr(Random(97, 122, 1))
	Next

	Local $sDrive, $sDir, $sFName, $sExt
	_PathSplit($sFilePath, $sDrive, $sDir, $sFName, $sExt)

	Local $sSndDirName
	If $sDrive = "" Then
		$sSndDirName = @WorkingDir & "\"
	Else
		$sSndDirName = $sDrive & $sDir
	EndIf
	Local $sSndFileName = $sFName & $sExt

	Local $sSndDirShortName = FileGetShortName($sSndDirName, 1)

	;open file
	__SoundMciSendString("open """ & $sFilePath & """ alias " & $aSndID[0])
	If @error Then Return SetError(1, @error, 0) ; open failed

	Local $sTrackLength, $bTryNextMethod = False
	Local $oShell = ObjCreate("shell.application")
	If IsObj($oShell) Then
		Local $oShellDir = $oShell.NameSpace($sSndDirShortName)
		If IsObj($oShellDir) Then
			Local $oShellDirFile = $oShellDir.Parsename($sSndFileName)
			If IsObj($oShellDirFile) Then
				Local $sRaw = $oShellDir.GetDetailsOf($oShellDirFile, -1)
				Local $aInfo = StringRegExp($sRaw, ": ([0-9]{2}:[0-9]{2}:[0-9]{2})", $STR_REGEXPARRAYGLOBALMATCH)
				If Not IsArray($aInfo) Then
					$bTryNextMethod = True
				Else
					$sTrackLength = $aInfo[0]
				EndIf
			Else
				$bTryNextMethod = True
			EndIf
		Else
			$bTryNextMethod = True
		EndIf
	Else
		$bTryNextMethod = True
	EndIf

	Local $sTag
	If $bTryNextMethod Then
		$bTryNextMethod = False
		If $sExt = ".mp3" Then
			Local $hFile = FileOpen(FileGetShortName($sSndDirName & $sSndFileName), $FO_READ)
			$sTag = FileRead($hFile, 5156)
			FileClose($hFile)
			$sTrackLength = __SoundReadXingFromMP3($sTag)
			If @error Then $bTryNextMethod = True
		Else
			$bTryNextMethod = True
		EndIf
	EndIf

	If $bTryNextMethod Then
		$bTryNextMethod = False
		If $sExt = ".mp3" Then
			$sTrackLength = __SoundReadTLENFromMP3($sTag)
			If @error Then $bTryNextMethod = True
		Else
			$bTryNextMethod = True
		EndIf
	EndIf

	If $bTryNextMethod Then
		$bTryNextMethod = False
		;tell mci to use time in milliseconds
		__SoundMciSendString("set " & $aSndID[0] & " time format milliseconds")
		;receive length of sound
		Local $iSndLenMs = __SoundMciSendString("status " & $aSndID[0] & " length", 255)

		;assign modified data to variables
		Local $iSndLenMin, $iSndLenHour, $iSndLenSecs
		__SoundTicksToTime($iSndLenMs, $iSndLenHour, $iSndLenMin, $iSndLenSecs)

		;assign formatted data to $sSndLenFormat
		$sTrackLength = StringFormat("%02i:%02i:%02i", $iSndLenHour, $iSndLenMin, $iSndLenSecs)
	EndIf

	; Convert Track_Length to mSec
	Local $aiTime = StringSplit($sTrackLength, ":")
	Local $iActualTicks = __SoundTimeToTicks($aiTime[1], $aiTime[2], $aiTime[3])

	;tell mci to use time in milliseconds
	__SoundMciSendString("set " & $aSndID[0] & " time format milliseconds")

	;;Get estimated length
	Local $iSoundTicks = __SoundMciSendString("status " & $aSndID[0] & " length", 255)

	;Compare to actual length
	Local $iVBRRatio
	If Abs($iSoundTicks - $iActualTicks) < 1000 Then ;Assume CBR, as our track length from shell.application is only accurate within 1000ms
		$iVBRRatio = 0
	Else ;Set correction ratio for VBR operations
		$iVBRRatio = $iSoundTicks / $iActualTicks
	EndIf

	$aSndID[1] = $iVBRRatio
	$aSndID[2] = 0
	$aSndID[3] = $__SOUNDCONSTANT_SNDID_MARKER

	Return $aSndID
EndFunc   ;==>_SoundOpen

Func _SoundClose($aSndID)
	If Not IsArray($aSndID) Or Not __SoundChkSndID($aSndID) Then Return SetError(3, 0, 0) ; invalid sound ID

	__SoundMciSendString("close " & $aSndID[0])
	If @error Then Return SetError(1, @error, 0)
	Return 1
EndFunc   ;==>_SoundClose

Func _SoundPlay($aSndID, $iWait = 0)
	;validate $iWait
	If $iWait <> 0 And $iWait <> 1 Then Return SetError(2, 0, 0) ; invalid $iWait parameter
	If Not __SoundChkSndID($aSndID) Then Return SetError(3, 0, 0) ; invalid Sound ID or file name

	;if sound has finished, seek to start
	If _SoundPos($aSndID, 2) = _SoundLength($aSndID, 2) Then __SoundMciSendString("seek " & $aSndID[0] & " to start")
	;If $iWait = 1 then pass wait to mci
	If $iWait = 1 Then
		__SoundMciSendString("play " & $aSndID[0] & " wait")
	Else
		__SoundMciSendString("play " & $aSndID[0])
	EndIf
	;return
	If @error Then Return SetError(1, @error, 0)
	Return 1
EndFunc   ;==>_SoundPlay
Func _SoundStop(ByRef $aSndID)
	; create temp variable so file name variable is not changed ByRef
	Local $vTemp = $aSndID
	If Not __SoundChkSndID($vTemp) Then Return SetError(3, 0, 0) ; invalid Sound ID or file name

	;reset VBR factor if used
	If IsArray($aSndID) Then $aSndID[2] = 0

	;stop
	__SoundMciSendString("stop " & $vTemp[0])
	If @error Then Return SetError(2, @error, 0)
	;seek to start
	__SoundMciSendString("seek " & $vTemp[0] & " to start")
	If @error Then Return SetError(1, @error, 0)
	;return
	Return 1
EndFunc   ;==>_SoundStop
